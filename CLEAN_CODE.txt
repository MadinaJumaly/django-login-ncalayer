
--- FILE: ./app/migrations/__init__.py ---


--- FILE: ./app/models.py ---

from django.db import models

# Create your models here.

--- FILE: ./app/__init__.py ---


--- FILE: ./app/apps.py ---

from django.apps import AppConfig


class AppConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "app"

--- FILE: ./app/admin.py ---

from django.contrib import admin

# Register your models here.

--- FILE: ./app/tests.py ---

from django.test import TestCase

# Create your tests here.

--- FILE: ./app/views.py ---

from django.shortcuts import render

def index(request):
    context = {
        "name": "John Doe",
    }
    return render(request, 'base.html', context)

from users.decorators import in_group

@in_group("Officer")
def approval_panel(request):
    ...
--- FILE: ./project/asgi.py ---

"""
ASGI config for project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "project.settings")

application = get_asgi_application()

--- FILE: ./project/__init__.py ---


--- FILE: ./project/settings.py ---

"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

print(f"\nBASE_DIR: {BASE_DIR}\n") 

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-x0eh^3fpi6d&bcv9qwcst4pby66s8_(nvow(gb5v0j_ba1nx+c"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "app",
    "users",
    "documents",
    "ncalogin",
]
AUTH_USER_MODEL = 'ncalogin.CustomUser'
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates/"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': './debug.log',  # Log file path
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        }
    },
    'loggers': {
        '': {
            'handlers': ['file', 'console'],  # Send logs to both file and console
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'diploma',         # your PostgreSQL database
        'USER': 'postgres',       # your PostgreSQL username
        'PASSWORD': '050912',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static/")
]
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/dashboard/"
--- FILE: ./project/urls.py ---

"""
URL configuration for project project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
from app.views import index
from users import views
from documents.views import my_view
from django.conf import settings
from django.conf.urls.static import static
from django.conf.urls import include
from ncalogin.views import ncalayer_login
from ncalogin.views import login_page, ncalayer_login
from django.contrib.auth.views import LogoutView
from documents.views import my_view, sign_document, send_email_view
urlpatterns = [
    path("admin/", admin.site.urls),
    # =path("", user),
    path("index/", index),
    path('api/ncalayer-login/', ncalayer_login, name='ncalayer_login'),
    path('login/', login_page, name='login'),
    path("logout/", views.logoutuser, name="logoutuser"),
    path('', views.home, name='home'),
    path('dashboard/', views.dashboard, name='dashboard'),
    path('documents/', my_view, name='my-view') ,
    path('sign/', sign_document, name='sign-document'),
    path('send_email/', send_email_view, name='send-email'),
    
]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

--- FILE: ./project/wsgi.py ---

"""
WSGI config for project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "project.settings")

application = get_wsgi_application()

--- FILE: ./users/templatetags/user_roles.py ---

from django import template

register = template.Library()

@register.filter(name='has_group')
def has_group(user, group_name):
    return user.groups.filter(name=group_name).exists()

@register.filter(name='has_any_group')
def has_any_group(user, group_names):
    group_list = [name.strip() for name in group_names.split(',')]
    return user.groups.filter(name__in=group_list).exists()
--- FILE: ./users/migrations/__init__.py ---


--- FILE: ./users/models.py ---

from django.db import models

# Create your models here.

--- FILE: ./users/__init__.py ---


--- FILE: ./users/apps.py ---

from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "users"

--- FILE: ./users/admin.py ---

from django.contrib import admin

# Register your models here.

--- FILE: ./users/tests.py ---

from django.test import TestCase

# Create your tests here.

--- FILE: ./users/views.py ---

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth.models import User
from django.db import IntegrityError
from django.contrib.auth import login, logout, authenticate
from django.utils import timezone
from django.contrib.auth.decorators import login_required

""" def user(request):
    context = {
        "name": "John Doe",
    }
    return render(request, 'login.html', context) """
def home(request):
    return render(request, 'home.html')

""" def signupuser(request):
    if request.method == 'GET':
        return render(request, 'signupuser.html', {'form':UserCreationForm()})
    else:
        if request.POST['password1'] == request.POST['password2']:
            try:
                user = User.objects.create_user(request.POST['username'], password=request.POST['password1'])
                user.save()
                login(request, user)
                return redirect('currenttodos')
            except IntegrityError:
                return render(request, 'signupuser.html', {'form':UserCreationForm(), 'error':'That username has already been taken. Please choose a new username'})
        else:
            return render(request, 'signupuser.html', {'form':UserCreationForm(), 'error':'Passwords did not match'})

def loginuser(request):
    if request.method == 'GET':
        return render(request, 'loginuser.html', {'form':AuthenticationForm()})
    else:
        user = authenticate(request, username=request.POST['username'], password=request.POST['password'])
        if user is None:
            return render(request, 'loginuser.html', {'form':AuthenticationForm(), 'error':'Username and password did not match'})
        else:
            login(request, user)
            return redirect('dashboard')

@login_required
def logoutuser(request):
    if request.method == 'POST':
        logout(request)
        return redirect('home') """
@login_required
def logoutuser(request):
    if request.method == 'POST':
        logout(request)
        return redirect('home')
@login_required
def dashboard(request):
    return render(request, 'assets/dashboard.html')








--- FILE: ./users/decorators.py ---

from django.contrib.auth.decorators import user_passes_test

from django.contrib.auth.decorators import user_passes_test

def in_group(admin):
    def check(user):
        return user.is_authenticated and user.groups.filter(name=group_name).exists()
    return user_passes_test(check)
--- FILE: ./templates/error_not_allowed.html ---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Oops!</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">

<div class="container d-flex align-items-center justify-content-center" style="min-height: 100vh;">
    <div class="text-center">
        <h1 class="display-4">Oops!</h1>
        <p class="lead">You can't access this page directly.</p>
        <a href="/" class="btn btn-primary">Back to Home</a>
    </div>
</div>

</body>
</html>
--- FILE: ./templates/home.html ---

{% extends "base.html" %}

--- FILE: ./templates/base.html ---

{% load static %}
{% load user_roles %}
<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

   
    <title>Company</title>
</head>
<body>

<nav class="navbar navbar-expand-md navbar-light bg-warning">
<div class="container">
    <a class="navbar-brand" href="{% url 'home' %}">
         {% comment %} <img src="{% static 'todo/logo.png' %}" width="30" height="30" class="d-inline-block align-top"> {% endcomment %}
        <span>COMPANY</span>
    </a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNav">
   {% comment %}  {% if user.is_authenticated %}
        <ul class="navbar-nav mr-auto">

                <li class="nav-item {{ current }}">
                    <a class="nav-link" href="{% url 'dashboard' %}">Dashboard</a>
                </li>

        </ul>
    {% endif %} {% endcomment %}
    <ul class="navbar-nav ml-auto">
            {% if user.is_authenticated %}
                    <li class="nav-item">
                        <a class="nav-link" href="admin">Create</a>
                    </li>
                {% endif %}
            {% if user.is_authenticated %}
            

                <li class="nav-item">
                    <a href="#" onclick="$('#signOutBtn').click()" class="nav-link">Logout</a>
                    <form style='display: none;' method="POST" action="{% url 'logoutuser' %}">
                        {% csrf_token %}
                        <button id="signOutBtn" type="submit">Logout</button>
                    </form>
                </li>
            
            {% endif %}
            {% if not user.is_authenticated %}
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'login' %}">Login</a>
                </li>
            {% endif %}
        </ul>
    </div>
</div>
</nav>
{% if user|has_group:"admin" %}
    <p>You are admin</p>
{% elif user|has_group:"author" %}
    <p>You are author</p>
{% else %}
    <p>You are a visitor</p>
{% endif %}
   {% if user.is_authenticated %}
{% if user|has_any_group:"admin,author" %}
   <p>You have permission to upload</p>
{% endif %}
{% endif %}
<h2>{{ message }}</h2>
{% if user.is_authenticated %}
    {% if documents %}
        <h3>All documents:</h3>
        <ul>
            {% for document in documents %}
                <li><a href="{{ document.docfile.url }}">{{ document.docfile.name }}</a></li>
            {% endfor %}
        </ul>
    {% else %}
        <p>No documents yet.</p>
    {% endif %}
 
{% endif %}
{% comment %} {% if user.is_authenticated %}
    <form action="{% url 'my-view' %}" method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {{ form.non_field_errors }}
        <p>{{ form.docfile.label_tag }} {{ form.docfile }}</p>
        <p>{{ form.docfile.errors }}</p>
        <input type="submit" value="Upload">
    </form>
{% endif %} {% endcomment %}
 <div class="container">

{% block content %}
{% endblock %}
</div> 

<!-- Optional JavaScript -->
<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
</body>
</html>
--- FILE: ./templates/list.html ---

{extends "base.html" %}
<h1>PDF Upload & Signing</h1>

<form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Upload</button>
</form>

<ul>
{% for doc in documents %}
    <li>
        <a href="{{ doc.docfile.url }}">{{ doc.docfile.name }}</a>
        {% if doc.cms_file %}
            | <a href="{{ doc.cms_file.url }}">Download .cms signature</a>
            {% if not doc.email_sent %}
                <form class="send-email-form" data-docid="{{ doc.id }}">
                    <input type="email" name="email" placeholder="Email to send .cms">
                    <button type="submit">Send by Email</button>
                </form>
            {% else %}
                | Sent to email
            {% endif %}
        {% else %}
            <button class="sign-btn" data-docid="{{ doc.id }}" data-url="{{ doc.docfile.url }}">Sign with NCALayer</button>
            <input type="email" placeholder="Email to send .cms" class="email-input">
        {% endif %}
    </li>
{% endfor %}
</ul>

<script src="https://unpkg.com/uuid@9.0.0/dist/umd/uuidv4.min.js"></script>
<script>
async function getBase64FromUrl(url) {
    const response = await fetch(url);
    const blob = await response.blob();
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result.split(',')[1]);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
    });
}

// --- Simple NCALayer client for demo ---
class NCALayerClient {
    constructor() {
        this.ws = null;
        this.requestId = 1;
        this.requests = {};
    }
    connect() {
        return new Promise((resolve, reject) => {
            if (this.ws && this.ws.readyState === 1) return resolve();
            this.ws = new WebSocket("wss://127.0.0.1:13579/");
            this.ws.onopen = resolve;
            this.ws.onerror = reject;
            this.ws.onmessage = (evt) => {
                const msg = JSON.parse(evt.data);
                if (msg.responseId && this.requests[msg.responseId]) {
                    this.requests[msg.responseId](msg);
                }
            };
        });
    }
    send(request) {
        return new Promise((resolve, reject) => {
            const id = this.requestId++;
            request.requestId = id;
            this.requests[id] = resolve;
            this.ws.send(JSON.stringify(request));
        });
    }
    async createCMSSignatureFromBase64(storage, base64, keyType='SIGNATURE', attach=false) {
        await this.connect();
        const req = {
            module: "kz.gov.pki.knca.commonUtils",
            method: "createCMSSignatureFromBase64",
            args: [storage, base64, keyType, attach]
        };
        const resp = await this.send(req);
        if (resp.code === 200) return resp.responseObject;
        else throw new Error(resp.message || "NCALayer error");
    }
    async getActiveTokens() {
        await this.connect();
        const req = {
            module: "kz.gov.pki.knca.commonUtils",
            method: "getActiveTokens",
            args: []
        };
        const resp = await this.send(req);
        if (resp.code === 200) return resp.responseObject;
        else throw new Error(resp.message || "NCALayer error");
    }
}

const nca = new NCALayerClient();

document.querySelectorAll(".sign-btn").forEach(btn => {
    btn.onclick = async function() {
        const docId = this.dataset.docid;
        const url = this.dataset.url;
        const emailInput = this.parentElement.querySelector('.email-input');
        const email = emailInput ? emailInput.value : "";

        // Try real connection to NCALayer!
        try {
            await nca.connect();
        } catch (err) {
            alert("NCALayer is NOT running or not available at wss://127.0.0.1:13579/. Please start NCALayer and try again.");
            return;
        }

        try {
            const base64 = await getBase64FromUrl(url);
            const tokens = await nca.getActiveTokens();
            const storage = tokens[0] || 'PKCS12';
            const signature = await nca.createCMSSignatureFromBase64(storage, base64, 'SIGNATURE', false);
            // POST to Django
            const res = await fetch('/documents/sign/', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRFToken": "{{ csrf_token }}"
                },
                body: JSON.stringify({
                    doc_id: docId,
                    signature: signature,
                    email: email
                })
            });
            if (res.ok) {
                alert("Signed! Page will reload.");
                location.reload();
            } else {
                alert("Failed to save signature.");
            }
        } catch (e) {
            alert("Error: " + e.message);
        }
    };
});

// Handle "Send by email" forms
document.querySelectorAll(".send-email-form").forEach(form => {
    form.onsubmit = async function(e) {
        e.preventDefault();
        const docId = this.dataset.docid;
        const email = this.querySelector("input[name=email]").value;
        if (!email) return alert("Enter email");
        const res = await fetch('/documents/send_email/', {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "X-CSRFToken": "{{ csrf_token }}"
            },
            body: JSON.stringify({ doc_id: docId, email: email })
        });
        if (res.ok) {
            alert("Sent!");
            location.reload();
        } else {
            alert("Send error!");
        }
    };
});
</script>
--- FILE: ./templates/ncalogin.html ---

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Login with Digital Signature</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="{% static 'js/jquery-3.6.0.min.js' %}"></script>
    <script src="{% static 'js/jquery.blockUI.js' %}"></script>
</head>
<body class="bg-light">

<div class="container d-flex align-items-center justify-content-center" style="min-height: 100vh;">
    <div class="card shadow p-4" style="width: 100%; max-width: 400px;">
        <h2 class="text-center mb-4">Login with EDS</h2>
        <div id="message" class="alert d-none" role="alert"></div>
        <button type="button" class="btn btn-success w-100" onclick="signAndLogin();">
            Войти через ЭЦП
        </button>
    </div>
</div>

<script>
const SOCKET_URL = 'wss://127.0.0.1:13579/';

function extractIIN(subjectDN) {
    if (!subjectDN || typeof subjectDN !== 'string') return null;
    const match = subjectDN.match(/SERIALNUMBER=(?:IIN)?(\d{12})/);
    return match ? match[1] : null;
}

function sendIINToBackend(iin) {
    console.log("📨 Отправлен IIN:", iin);
    fetch("/api/ncalayer-login/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ iin: iin })
    })
    .then(response => response.json())
    .then(data => {
        console.log("✅ Ответ от Django:", data);
        if (data.success) {
            window.location.href = data.redirect_url || "/dashboard/";
        } else {
            alert("Ошибка входа: " + (data.error || "Неизвестная ошибка"));
        }
    })
    .catch(err => alert("Ошибка запроса: " + err));
}

function signAndLogin() {
    const socket = new WebSocket(SOCKET_URL);

    socket.onopen = () => {
        const request = {
            module: "kz.gov.pki.knca.commonUtils",
            method: "getKeyInfo",
            args: ["PKCS12"]
        };
        socket.send(JSON.stringify(request));
        console.log("📡 Запрос getKeyInfo отправлен в NCALayer");
    };

    socket.onmessage = (event) => {
    const result = JSON.parse(event.data);
    console.log("🟡 Ответ от NCALayer:", result);

    if (result.code !== "200" || !result.responseObject) {
        console.warn("⏳ Промежуточный или неполный ответ — игнорируем.");
        return;
    }

    const { subjectDn, certNotBefore, certNotAfter } = result.responseObject;

    if (!subjectDn) {
        alert("❌ Не удалось получить subjectDN из сертификата.");
        return;
    }

    const iin = extractIIN(subjectDn);
    if (!iin) {
        alert("❌ Не удалось извлечь ИИН из subjectDN.");
        return;
    }

    if (!certNotBefore || !certNotAfter) {
        alert("❌ Сертификат не содержит даты действия (certNotBefore / certNotAfter).");
        return;
    }

    const issued = new Date(Number(certNotBefore));
    const expires = new Date(Number(certNotAfter));
    const today = new Date();

    console.log("📅 Дата выпуска:", issued, "Истекает:", expires, "Сегодня:", today);

    if (today < issued || today > expires) {
        alert(`⛔ Срок действия сертификата: ${issued.toLocaleDateString()} — ${expires.toLocaleDateString()}`);
        return;
    }

    sendIINToBackend(iin);
};
}
</script>

</body>
</html>


--- FILE: ./templates/loginuser.html ---

{% extends "base.html" %}

{% block content %}
    <div class="row justify-content-center mt-5">
        <div class="col-md-5">
            <h2>Login</h2>
        </div>
    </div>
    <div class="row justify-content-center mt-5">
        <div class="col-md-5">
            {% if error %}
                <div class="alert alert-danger" role="alert">
                    {{ error }}
                </div>
            {% endif %}
            <form method="POST">
                {% csrf_token %}
                <div class="form-group">
                    <label for="username">Username</label>
                    <input type="text" name="username" class="form-control" id="username">
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" name="password" class="form-control" id="password">
                </div>
                <button type="submit" class="btn btn-primary">Login</button>
            </form>
            <hr>
            <div class="text-center">
                Need an account? <a href="{% url 'signupuser' %}">Sign Up here</a>
            </div>
        </div>
    </div>
{% endblock %}
--- FILE: ./templates/signupuser.html ---

{% extends "base.html" %}

{% block content %}
    <div class="row justify-content-center mt-5">
        <div class="col-md-5">
            <h2>Sign Up</h2>
        </div>
    </div>
    <div class="row justify-content-center mt-5">
        <div class="col-md-5">
            {% if error %}
                <div class="alert alert-danger" role="alert">
                    {{ error }}
                </div>
            {% endif %}
            <form method="POST">
                {% csrf_token %}
                <div class="form-group">
                    <label for="username">Username</label>
                    <input type="text" name="username" class="form-control" id="username" aria-describedby="usernameHelp">
                    <small id="usernameHelp" class="form-text text-muted">Your username must be unique. We'll let you know if someone has taken it already.</small>
                </div>
                <div class="form-group">
                    <label for="password1">Password</label>
                    <input type="password" name="password1" class="form-control" id="password1">
                </div>
                <div class="form-group">
                    <label for="password2">Confirm Password</label>
                    <input type="password" name="password2" class="form-control" id="password2">
                </div>
                <button type="submit" class="btn btn-primary">Sign Up</button>
            </form>
            <hr>
            <div class="text-center">
                Do you already have an account? <a href="{% url 'loginuser' %}">Login here</a>
            </div>
        </div>
    </div>
{% endblock %}
--- FILE: ./templates/ihv.html ---


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    
</body>
</html>
--- FILE: ./templates/create_document.html ---


--- FILE: ./templates/test-subjectdn.html ---

<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>NCALayer SubjectDN Test</title>
</head>
<body style="font-family: sans-serif; padding: 2rem;">
  <h2>🧪 Проверка subjectDN от NCALayer</h2>
  <button onclick="getSubjectDN()">📥 Получить subjectDN</button>

  <pre id="output" style="background:#eee; padding:1rem; margin-top:1rem;"></pre>

  <script>
    function getSubjectDN() {
      const output = document.getElementById("output");
      const socket = new WebSocket("wss://127.0.0.1:13579/");

      socket.onopen = () => {
        const request = {
          module: "kz.gov.pki.knca.commonUtils",
          method: "getSubjectDN",
          args: []
        };
        socket.send(JSON.stringify(request));
        output.textContent = "🔄 Отправлен запрос к NCALayer...";
      };

      socket.onmessage = (event) => {
        const result = JSON.parse(event.data);
        console.log("📥 Ответ от NCALayer:", result);
        if (result.code === "200" && result.responseObject?.subjectDn) {
          output.textContent = "✅ subjectDN:\n" + result.responseObject.subjectDn;
        } else {
          output.textContent = "❌ Ошибка: " + (result.message || "subjectDN не получен");
        }
      };

      socket.onerror = () => {
        output.textContent = "❌ Ошибка подключения к NCALayer";
      };
    }
  </script>
</body>
</html>
--- FILE: ./templates/assets/index.html ---


--- FILE: ./templates/assets/dashboard.html ---

{% extends "base.html" %}

{% block content %}
<br>
    <br>
    <br>
    <br>
    <br>
    <br>


{% endblock %}
--- FILE: ./manage.py ---

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "project.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()

--- FILE: ./documents/migrations/__init__.py ---


--- FILE: ./documents/migrations/0001_initial.py ---

# Generated by Django 5.1.6 on 2025-04-22 01:46

from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("docfile", models.FileField(upload_to="documents/%Y/%m/%d")),
            ],
        ),
    ]

--- FILE: ./documents/migrations/0002_document_cms_file_document_signed_pdf.py ---

# Generated by Django 5.1 on 2025-05-23 11:24

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("documents", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="document",
            name="cms_file",
            field=models.FileField(
                blank=True, null=True, upload_to="cms_sigs/%Y/%m/%d"
            ),
        ),
        migrations.AddField(
            model_name="document",
            name="signed_pdf",
            field=models.FileField(
                blank=True, null=True, upload_to="signed_pdfs/%Y/%m/%d"
            ),
        ),
    ]

--- FILE: ./documents/models.py ---

# app/models.py
from django.db import models

class Document(models.Model):
    docfile = models.FileField(upload_to='documents/%Y/%m/%d')
    signed_pdf = models.FileField(upload_to='signed_pdfs/%Y/%m/%d', null=True, blank=True)
    cms_file = models.FileField(upload_to='cms_sigs/%Y/%m/%d', null=True, blank=True)

--- FILE: ./documents/__init__.py ---


--- FILE: ./documents/apps.py ---

from django.apps import AppConfig


class DocumentsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "documents"

--- FILE: ./documents/forms.py ---

# app/forms.py
from django import forms
from .models import Document

class DocumentForm(forms.ModelForm):
    class Meta:
        model = Document
        fields = ['docfile']
        labels = {'docfile': 'Select a file'}
--- FILE: ./documents/admin.py ---

from django.contrib import admin

# Register your models here.

--- FILE: ./documents/tests.py ---

from django.test import TestCase

# Create your tests here.

--- FILE: ./documents/views.py ---

# app/views.py
from django.shortcuts import render, redirect
from .forms import DocumentForm
from .models import Document
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse
import base64
from django.core.files.base import ContentFile
from django.core.mail import EmailMessage

def my_view(request):
    message = 'Upload as many files as you want!'
    if request.method == 'POST':
        form = DocumentForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect('my-view')
        else:
            message = 'The form is not valid. Fix the following error:'
    else:
        form = DocumentForm()
    documents = Document.objects.all()
    return render(request, 'list.html', {
        'form': form,
        'documents': documents,
        'message': message,
    })

@csrf_exempt
def sign_document(request):
    import json
    if request.method == "POST":
        data = json.loads(request.body)
        doc_id = data.get('doc_id')
        signature_b64 = data.get('signature')
        email = data.get('email', "")
        doc = Document.objects.get(pk=doc_id)
        filename = doc.docfile.name.split("/")[-1] + ".cms"
        cms_file = ContentFile(base64.b64decode(signature_b64), name=filename)
        doc.cms_file.save(filename, cms_file, save=True)
        # Optionally, send by email immediately
        if email:
            send_signature_by_email(email, doc)
            doc.email_sent = True
            doc.save()
        return JsonResponse({"status": "ok"})
    return JsonResponse({"error": "POST only"}, status=405)

@csrf_exempt
def send_email_view(request):
    import json
    if request.method == "POST":
        data = json.loads(request.body)
        doc_id = data.get('doc_id')
        email = data.get('email')
        doc = Document.objects.get(pk=doc_id)
        send_signature_by_email(email, doc)
        doc.email_sent = True
        doc.save()
        return JsonResponse({"status": "ok"})
    return JsonResponse({"error": "POST only"}, status=405)

def send_signature_by_email(email, doc):
    subject = "Your signed document"
    message = "Please find the attached signature (.cms file) for your document."
    mail = EmailMessage(subject, message, to=[email])
    if doc.cms_file:
        mail.attach(doc.cms_file.name, doc.cms_file.read())
    mail.send()
--- FILE: ./ncalogin/migrations/__init__.py ---


--- FILE: ./ncalogin/migrations/0001_initial.py ---

# Generated by Django 5.1 on 2025-04-28 01:41

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "iin",
                    models.CharField(blank=True, max_length=12, null=True, unique=True),
                ),
                ("full_name", models.CharField(blank=True, max_length=255, null=True)),
                ("subject_dn", models.TextField(blank=True, null=True)),
                ("certificate_pem", models.TextField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]

--- FILE: ./ncalogin/migrations/0002_remove_customuser_certificate_pem_and_more.py ---

# Generated by Django 5.1 on 2025-04-28 05:16

from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("ncalogin", "0001_initial"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="customuser",
            name="certificate_pem",
        ),
        migrations.RemoveField(
            model_name="customuser",
            name="full_name",
        ),
    ]

--- FILE: ./ncalogin/models.py ---

from django.contrib.auth.models import AbstractUser
from django.db import models

class CustomUser(AbstractUser):
    iin = models.CharField(max_length=12, unique=True, null=True, blank=True)
    subject_dn = models.TextField(null=True, blank=True)

    USERNAME_FIELD = 'username'  # Keep username as primary key
--- FILE: ./ncalogin/__init__.py ---


--- FILE: ./ncalogin/apps.py ---

from django.apps import AppConfig


class NcaloginConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "ncalogin"

--- FILE: ./ncalogin/admin.py ---

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser

@admin.register(CustomUser)
class CustomUserAdmin(UserAdmin):
    model = CustomUser

    # Fields visible in admin form
    fieldsets = (
        (None, {'fields': ('username', 'iin', 'password')}),
        ('Personal info', {'fields': ('first_name', 'last_name', 'email')}),
        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        ('Important dates', {'fields': ('last_login', 'date_joined')}),
    )

    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'iin', 'password1', 'password2', 'is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}
        ),
    )

    list_display = ('username', 'iin', 'email', 'is_staff', 'is_active')
    search_fields = ('username', 'iin', 'email')
--- FILE: ./ncalogin/tests.py ---

from django.test import TestCase

# Create your tests here.

--- FILE: ./ncalogin/views.py ---

from django.contrib.auth import login, get_user_model
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from django.shortcuts import render
import re
User = get_user_model()

@csrf_exempt
def ncalayer_login(request):
    if request.method != "POST":
        return JsonResponse({"success": False, "error": "Метод не поддерживается"}, status=405)

    try:
        data = json.loads(request.body)
        iin = data.get("iin", "")
        if not iin:
            return JsonResponse({"success": False, "error": "IIN не передан"}, status=400)
    except json.JSONDecodeError:
        return JsonResponse({"success": False, "error": "Некорректный JSON"}, status=400)

    try:
        user = User.objects.get(iin=iin)
        login(request, user)
        return JsonResponse({"success": True, "redirect_url": "/dashboard/"})
    except User.DoesNotExist:
        return JsonResponse({"success": False, "error": "Пользователь с таким ИИН не найден."}, status=404)


def login_page(request):
    return render(request, 'ncalogin.html')
